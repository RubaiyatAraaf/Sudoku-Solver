{
  "{\"sourceRoot\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\",\"filename\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)",
      "filename": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    var _req$body = req.body,\n        puzzle = _req$body.puzzle,\n        coordinate = _req$body.coordinate,\n        value = _req$body.value;\n    var validPuzzle = solver.validate(puzzle);\n\n    if (!puzzle || !coordinate || !value) {\n      res.json({\n        error: 'Required field(s) missing'\n      });\n    } else if (validPuzzle === \"Invalid characters in puzzle\") {\n      res.json({\n        error: \"Invalid characters in puzzle\"\n      });\n    } else if (validPuzzle === \"Expected puzzle to be 81 characters long\") {\n      res.json({\n        error: \"Expected puzzle to be 81 characters long\"\n      });\n    } else if (/^([A-I][1-9])$/.test(coordinate) === false) {\n      res.json({\n        error: 'Invalid coordinate'\n      });\n    } else if (/^[1-9]$/.test(value) === false) {\n      res.json({\n        error: 'Invalid value'\n      });\n    } else {\n      var row = coordinate.split(\"\")[0];\n      var column = coordinate.split(\"\")[1];\n      var board = solver.transformToBoard(validPuzzle);\n      var conflict = [];\n\n      if (solver.checkRowPlacement(board, row, column, value) === false) {\n        conflict.push(\"row\");\n      }\n\n      if (solver.checkColPlacement(board, row, column, value) === false) {\n        conflict.push(\"column\");\n      }\n\n      if (solver.checkRegionPlacement(board, row, column, value) === false) {\n        conflict.push(\"region\");\n      }\n\n      if (conflict.length === 0) {\n        res.json({\n          valid: true\n        });\n      } else {\n        res.json({\n          valid: false,\n          conflict: conflict\n        });\n      }\n    }\n  });\n  app.route('/api/solve').post(function (req, res) {\n    var puzzle = req.body.puzzle;\n    var validPuzzle = solver.validate(puzzle);\n\n    if (validPuzzle === \"Required field missing\") {\n      res.json({\n        error: 'Required field missing'\n      });\n    } else if (validPuzzle === \"Invalid characters in puzzle\") {\n      res.json({\n        error: \"Invalid characters in puzzle\"\n      });\n    } else if (validPuzzle === \"Expected puzzle to be 81 characters long\") {\n      res.json({\n        error: \"Expected puzzle to be 81 characters long\"\n      });\n    } else {\n      var solution = solver.solve(validPuzzle);\n\n      if (solution === \"Puzzle cannot be solved\") {\n        res.json({\n          error: \"Puzzle cannot be solved\"\n        });\n      } else {\n        res.send({\n          solution: solution\n        });\n      }\n    }\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsInNvbHZlciIsInJvdXRlIiwicG9zdCIsInJlcSIsInJlcyIsImJvZHkiLCJwdXp6bGUiLCJjb29yZGluYXRlIiwidmFsdWUiLCJ2YWxpZFB1enpsZSIsInZhbGlkYXRlIiwianNvbiIsImVycm9yIiwidGVzdCIsInJvdyIsInNwbGl0IiwiY29sdW1uIiwiYm9hcmQiLCJ0cmFuc2Zvcm1Ub0JvYXJkIiwiY29uZmxpY3QiLCJjaGVja1Jvd1BsYWNlbWVudCIsInB1c2giLCJjaGVja0NvbFBsYWNlbWVudCIsImNoZWNrUmVnaW9uUGxhY2VtZW50IiwibGVuZ3RoIiwidmFsaWQiLCJzb2x1dGlvbiIsInNvbHZlIiwic2VuZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsaUNBQUQsQ0FBNUI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFFOUIsTUFBSUMsTUFBTSxHQUFHLElBQUlMLFlBQUosRUFBYjtBQUVBSSxFQUFBQSxHQUFHLENBQUNFLEtBQUosQ0FBVSxZQUFWLEVBQ0dDLElBREgsQ0FDUSxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLG9CQUNrQkQsR0FBRyxDQUFDRSxJQUR0QjtBQUFBLFFBQ1hDLE1BRFcsYUFDWEEsTUFEVztBQUFBLFFBQ0hDLFVBREcsYUFDSEEsVUFERztBQUFBLFFBQ1NDLEtBRFQsYUFDU0EsS0FEVDtBQUVsQixRQUFJQyxXQUFXLEdBQUdULE1BQU0sQ0FBQ1UsUUFBUCxDQUFnQkosTUFBaEIsQ0FBbEI7O0FBQ0EsUUFBSSxDQUFDQSxNQUFELElBQVcsQ0FBQ0MsVUFBWixJQUEwQixDQUFDQyxLQUEvQixFQUFxQztBQUNuQ0osTUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVM7QUFBQ0MsUUFBQUEsS0FBSyxFQUFD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VDtBQUNELEtBRkksTUFHQSxJQUFJSCxXQUFXLEtBQUssMENBQXBCLEVBQStEO0FBQ2xFTCxNQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBUztBQUFDQyxRQUFBQSxLQUFLLEVBQUU7QUFBUixPQUFUO0FBQ0QsS0FGSSxNQUdBO0FBQ0gsVUFBSWMsUUFBUSxHQUFHMUIsTUFBTSxDQUFDMkIsS0FBUCxDQUFhbEIsV0FBYixDQUFmOztBQUNBLFVBQUlpQixRQUFRLEtBQUsseUJBQWpCLEVBQTJDO0FBQ3pDdEIsUUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVM7QUFBQ0MsVUFBQUEsS0FBSyxFQUFFO0FBQVIsU0FBVDtBQUNELE9BRkQsTUFHSTtBQUNGUixRQUFBQSxHQUFHLENBQUN3QixJQUFKLENBQVM7QUFBQ0YsVUFBQUEsUUFBUSxFQUFSQTtBQUFELFNBQVQ7QUFDRDtBQUNGO0FBQ0YsR0F0Qkg7QUF1QkQsQ0F4RUQiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxyYXJhYVxcRG93bmxvYWRzXFxGcmVlQ29kZUNhbXAtUXVhbGl0eS1Bc3N1cmFuY2VcXFF1YWxpdHkgQXNzdXJhbmNlIFByb2plY3RzXFxTdWRva3UgU29sdmVyKCM0KVxccm91dGVzXFwiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBTdWRva3VTb2x2ZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9zdWRva3Utc29sdmVyLmpzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcclxuICBcclxuICBsZXQgc29sdmVyID0gbmV3IFN1ZG9rdVNvbHZlcigpO1xyXG5cclxuICBhcHAucm91dGUoJy9hcGkvY2hlY2snKVxyXG4gICAgLnBvc3QoKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgIGNvbnN0IHtwdXp6bGUsIGNvb3JkaW5hdGUsIHZhbHVlfSA9IHJlcS5ib2R5OyBcclxuICAgICAgbGV0IHZhbGlkUHV6emxlID0gc29sdmVyLnZhbGlkYXRlKHB1enpsZSk7IFxyXG4gICAgICBpZiAoIXB1enpsZSB8fCAhY29vcmRpbmF0ZSB8fCAhdmFsdWUpe1xyXG4gICAgICAgIHJlcy5qc29uKHtlcnJvcjonUmVxdWlyZWQgZmllbGQocykgbWlzc2luZyd9KVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHZhbGlkUHV6emxlID09PSBcIkludmFsaWQgY2hhcmFjdGVycyBpbiBwdXp6bGVcIil7XHJcbiAgICAgICAgcmVzLmpzb24oe2Vycm9yOlwiSW52YWxpZCBjaGFyYWN0ZXJzIGluIHB1enpsZVwifSlcclxuICAgICAgfSBcclxuICAgICAgZWxzZSBpZiAodmFsaWRQdXp6bGUgPT09IFwiRXhwZWN0ZWQgcHV6emxlIHRvIGJlIDgxIGNoYXJhY3RlcnMgbG9uZ1wiKXtcclxuICAgICAgICByZXMuanNvbih7ZXJyb3I6XCJFeHBlY3RlZCBwdXp6bGUgdG8gYmUgODEgY2hhcmFjdGVycyBsb25nXCJ9KTsgXHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoL14oW0EtSV1bMS05XSkkLy50ZXN0KGNvb3JkaW5hdGUpID09PSBmYWxzZSl7XHJcbiAgICAgICAgcmVzLmpzb24oe2Vycm9yOiAnSW52YWxpZCBjb29yZGluYXRlJ30pXHJcbiAgICAgIH0gXHJcbiAgICAgIGVsc2UgaWYgKC9eWzEtOV0kLy50ZXN0KHZhbHVlKSA9PT0gZmFsc2Upe1xyXG4gICAgICAgIHJlcy5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHZhbHVlJyB9KVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgbGV0IHJvdyA9IGNvb3JkaW5hdGUuc3BsaXQoXCJcIilbMF07ICBcclxuICAgICAgICBsZXQgY29sdW1uID0gY29vcmRpbmF0ZS5zcGxpdChcIlwiKVsxXTtcclxuICAgICAgICBsZXQgYm9hcmQgPSBzb2x2ZXIudHJhbnNmb3JtVG9Cb2FyZCh2YWxpZFB1enpsZSk7XHJcbiAgICAgICAgbGV0IGNvbmZsaWN0ID0gW107IFxyXG4gICAgICAgIGlmIChzb2x2ZXIuY2hlY2tSb3dQbGFjZW1lbnQoYm9hcmQsIHJvdywgY29sdW1uLCB2YWx1ZSk9PT1mYWxzZSl7XHJcbiAgICAgICAgICBjb25mbGljdC5wdXNoKFwicm93XCIpOyBcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNvbHZlci5jaGVja0NvbFBsYWNlbWVudChib2FyZCwgcm93LCBjb2x1bW4sIHZhbHVlKT09PWZhbHNlKXtcclxuICAgICAgICAgIGNvbmZsaWN0LnB1c2goXCJjb2x1bW5cIik7IFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc29sdmVyLmNoZWNrUmVnaW9uUGxhY2VtZW50KGJvYXJkLCByb3csIGNvbHVtbiwgdmFsdWUpPT09ZmFsc2Upe1xyXG4gICAgICAgICAgY29uZmxpY3QucHVzaChcInJlZ2lvblwiKTsgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29uZmxpY3QubGVuZ3RoPT09MCl7XHJcbiAgICAgICAgICByZXMuanNvbih7dmFsaWQ6dHJ1ZX0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICByZXMuanNvbih7dmFsaWQ6ZmFsc2UsIGNvbmZsaWN0fSlcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICBhcHAucm91dGUoJy9hcGkvc29sdmUnKVxyXG4gICAgLnBvc3QoKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgIGxldCBwdXp6bGUgPSByZXEuYm9keS5wdXp6bGU7XHJcbiAgICAgIGxldCB2YWxpZFB1enpsZSA9IHNvbHZlci52YWxpZGF0ZShwdXp6bGUpO1xyXG4gICAgICBpZiAodmFsaWRQdXp6bGUgPT09IFwiUmVxdWlyZWQgZmllbGQgbWlzc2luZ1wiKXtcclxuICAgICAgICByZXMuanNvbih7ZXJyb3I6J1JlcXVpcmVkIGZpZWxkIG1pc3NpbmcnfSlcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICh2YWxpZFB1enpsZSA9PT0gXCJJbnZhbGlkIGNoYXJhY3RlcnMgaW4gcHV6emxlXCIpe1xyXG4gICAgICAgIHJlcy5qc29uKHtlcnJvcjpcIkludmFsaWQgY2hhcmFjdGVycyBpbiBwdXp6bGVcIn0pXHJcbiAgICAgIH0gXHJcbiAgICAgIGVsc2UgaWYgKHZhbGlkUHV6emxlID09PSBcIkV4cGVjdGVkIHB1enpsZSB0byBiZSA4MSBjaGFyYWN0ZXJzIGxvbmdcIil7XHJcbiAgICAgICAgcmVzLmpzb24oe2Vycm9yOiBcIkV4cGVjdGVkIHB1enpsZSB0byBiZSA4MSBjaGFyYWN0ZXJzIGxvbmdcIn0pOyBcclxuICAgICAgfSBcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbGV0IHNvbHV0aW9uID0gc29sdmVyLnNvbHZlKHZhbGlkUHV6emxlKTsgXHJcbiAgICAgICAgaWYgKHNvbHV0aW9uID09PSBcIlB1enpsZSBjYW5ub3QgYmUgc29sdmVkXCIpe1xyXG4gICAgICAgICAgcmVzLmpzb24oe2Vycm9yOiBcIlB1enpsZSBjYW5ub3QgYmUgc29sdmVkXCJ9KVxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgIHJlcy5zZW5kKHtzb2x1dGlvbn0pO1xyXG4gICAgICAgIH0gXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG59OyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "puzzle",
        "coordinate",
        "value",
        "validPuzzle",
        "validate",
        "json",
        "error",
        "test",
        "row",
        "split",
        "column",
        "board",
        "transformToBoard",
        "conflict",
        "checkRowPlacement",
        "push",
        "checkColPlacement",
        "checkRegionPlacement",
        "length",
        "valid",
        "solution",
        "solve",
        "send"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\routes\\",
      "sourcesContent": [
        "'use strict';\r\n\r\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\r\n\r\nmodule.exports = function (app) {\r\n  \r\n  let solver = new SudokuSolver();\r\n\r\n  app.route('/api/check')\r\n    .post((req, res) => {\r\n      const {puzzle, coordinate, value} = req.body; \r\n      let validPuzzle = solver.validate(puzzle); \r\n      if (!puzzle || !coordinate || !value){\r\n        res.json({error:'Required field(s) missing'})\r\n      }\r\n      else if (validPuzzle === \"Invalid characters in puzzle\"){\r\n        res.json({error:\"Invalid characters in puzzle\"})\r\n      } \r\n      else if (validPuzzle === \"Expected puzzle to be 81 characters long\"){\r\n        res.json({error:\"Expected puzzle to be 81 characters long\"}); \r\n      }\r\n      else if (/^([A-I][1-9])$/.test(coordinate) === false){\r\n        res.json({error: 'Invalid coordinate'})\r\n      } \r\n      else if (/^[1-9]$/.test(value) === false){\r\n        res.json({ error: 'Invalid value' })\r\n      }\r\n      else{\r\n        let row = coordinate.split(\"\")[0];  \r\n        let column = coordinate.split(\"\")[1];\r\n        let board = solver.transformToBoard(validPuzzle);\r\n        let conflict = []; \r\n        if (solver.checkRowPlacement(board, row, column, value)===false){\r\n          conflict.push(\"row\"); \r\n        }\r\n        if (solver.checkColPlacement(board, row, column, value)===false){\r\n          conflict.push(\"column\"); \r\n        }\r\n        if (solver.checkRegionPlacement(board, row, column, value)===false){\r\n          conflict.push(\"region\"); \r\n        }\r\n\r\n        if (conflict.length===0){\r\n          res.json({valid:true})\r\n        }\r\n        else{\r\n          res.json({valid:false, conflict})\r\n        }\r\n\r\n\r\n      }\r\n    });\r\n    \r\n  app.route('/api/solve')\r\n    .post((req, res) => {\r\n      let puzzle = req.body.puzzle;\r\n      let validPuzzle = solver.validate(puzzle);\r\n      if (validPuzzle === \"Required field missing\"){\r\n        res.json({error:'Required field missing'})\r\n      }\r\n      else if (validPuzzle === \"Invalid characters in puzzle\"){\r\n        res.json({error:\"Invalid characters in puzzle\"})\r\n      } \r\n      else if (validPuzzle === \"Expected puzzle to be 81 characters long\"){\r\n        res.json({error: \"Expected puzzle to be 81 characters long\"}); \r\n      } \r\n      else {\r\n        let solution = solver.solve(validPuzzle); \r\n        if (solution === \"Puzzle cannot be solved\"){\r\n          res.json({error: \"Puzzle cannot be solved\"})\r\n        } \r\n        else{\r\n          res.send({solution});\r\n        } \r\n      }\r\n    });\r\n};"
      ]
    },
    "sourceType": "script",
    "mtime": 1692393219149
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\",\"filename\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\raraa\\\\Downloads\\\\FreeCodeCamp-Quality-Assurance\\\\Quality Assurance Projects\\\\Sudoku Solver(#4)\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)",
      "filename": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"validate\",\n    value: function validate(puzzleString) {\n      if (Boolean(puzzleString) === false) {\n        return 'Required field missing';\n      }\n\n      if (puzzleString.split(\"\").length !== 81) {\n        return \"Expected puzzle to be 81 characters long\";\n      } else if (/[^0-9\\.]/.test(puzzleString)) {\n        return \"Invalid characters in puzzle\";\n      } else {\n        return puzzleString;\n      }\n    }\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(board, row, column, value) {\n      var fixedI = this.convertLetterToRow(row);\n      var j = Number(column) - 1;\n\n      for (var i = 0; i < 9; i++) {\n        if (board[fixedI][j] === value && i === fixedI) {\n          return true;\n        } else if (board[i][j] === value) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(board, row, column, value) {\n      var i = this.convertLetterToRow(row);\n      var j = Number(column) - 1;\n\n      if (board[i][j] === value) {\n        return true;\n      }\n\n      return board[i].indexOf(value) < 0;\n    }\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(board, row, column, value) {\n      row = this.convertLetterToRow(row);\n      column = Number(column) - 1;\n\n      if (board[row][column] === value) {\n        return true;\n      }\n\n      var startRow = row - row % 3;\n      var startCol = column - column % 3;\n\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          if (board[i + startRow][j + startCol] === value) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"solve\",\n    value: function solve(puzzleString) {\n      var board = this.transformToBoard(puzzleString);\n      var rows = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"];\n\n      if (this.fillInNumbers(board, 0, 0)) {\n        return board.flat().join(\"\");\n      } else {\n        return \"Puzzle cannot be solved\";\n      }\n    }\n  }, {\n    key: \"isSafe\",\n    value: function isSafe(board, i, j, value) {\n      var letterRows = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"];\n      var isRegionPlaceable = this.checkRegionPlacement(board, letterRows[i], j + 1, value);\n      var isColPlacementValid = this.checkColPlacement(board, letterRows[i], j + 1, value);\n      var isRowPlacementValid = this.checkRowPlacement(board, letterRows[i], j + 1, value);\n      return isRegionPlaceable && isColPlacementValid && isRowPlacementValid;\n    }\n  }, {\n    key: \"fillInNumbers\",\n    value: function fillInNumbers(board, row, column) {\n      if (row === 8 && column === 9) {\n        return true;\n      }\n\n      if (column === 9) {\n        row += 1;\n        column = 0;\n      }\n\n      if (board[row][column] !== \".\") {\n        return this.fillInNumbers(board, row, column + 1);\n      }\n\n      for (var value = 1; value <= 9; value++) {\n        if (this.isSafe(board, row, column, String(value))) {\n          board[row][column] = String(value);\n\n          if (this.fillInNumbers(board, row, column + 1)) {\n            return true;\n          }\n        }\n\n        board[row][column] = \".\";\n      }\n\n      return false;\n    }\n  }, {\n    key: \"transformToBoard\",\n    value: function transformToBoard(puzzleString) {\n      var board = [];\n      var puzzleArr = puzzleString.split(\"\");\n\n      for (var i = 0; i < 9; i++) {\n        board.push(puzzleArr.slice(9 * i, (i + 1) * 9));\n      }\n\n      return board;\n    }\n  }, {\n    key: \"convertLetterToRow\",\n    value: function convertLetterToRow(row) {\n      var rowConverter = {\n        A: 0,\n        B: 1,\n        C: 2,\n        D: 3,\n        E: 4,\n        F: 5,\n        G: 6,\n        H: 7,\n        I: 8\n      };\n      return rowConverter[row];\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "Boolean",
        "split",
        "length",
        "test",
        "board",
        "row",
        "column",
        "value",
        "fixedI",
        "convertLetterToRow",
        "j",
        "Number",
        "i",
        "indexOf",
        "startRow",
        "startCol",
        "transformToBoard",
        "rows",
        "fillInNumbers",
        "flat",
        "join",
        "letterRows",
        "isRegionPlaceable",
        "checkRegionPlacement",
        "isColPlacementValid",
        "checkColPlacement",
        "isRowPlacementValid",
        "checkRowPlacement",
        "isSafe",
        "String",
        "puzzleArr",
        "push",
        "slice",
        "rowConverter",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\raraa\\Downloads\\FreeCodeCamp-Quality-Assurance\\Quality Assurance Projects\\Sudoku Solver(#4)\\controllers\\",
      "sourcesContent": [
        "class SudokuSolver {\r\n  validate(puzzleString) {\r\n    if (Boolean(puzzleString)===false){\r\n        return 'Required field missing'; \r\n    }\r\n    if (puzzleString.split(\"\").length !== 81){\r\n      return \"Expected puzzle to be 81 characters long\"; \r\n    }\r\n    else if (/[^0-9\\.]/.test(puzzleString)){\r\n      return \"Invalid characters in puzzle\"; \r\n    }\r\n    else{\r\n      return puzzleString; \r\n    }\r\n  }\r\n\r\n  checkRowPlacement(board, row, column, value) {\r\n    let fixedI = this.convertLetterToRow(row)\r\n    let j = Number(column)-1; \r\n    for (let i=0; i<9; i++){\r\n      if (board[fixedI][j]===value && i===fixedI){\r\n        return true\r\n      }\r\n      else if (board[i][j]===value){\r\n        return false; \r\n      }\r\n    }\r\n    return true; \r\n  }\r\n \r\n  checkColPlacement(board, row, column, value) { \r\n   let i = this.convertLetterToRow(row)\r\n   let j = Number(column)-1; \r\n   if (board[i][j]===value){\r\n     return true\r\n   }\r\n   return (board[i].indexOf(value)<0); \r\n  }\r\n\r\n  checkRegionPlacement(board, row, column, value) {\r\n    row = this.convertLetterToRow(row); \r\n    column = Number(column)-1; \r\n    if (board[row][column]===value){\r\n      return true\r\n    }\r\n    let startRow = row - row % 3;\r\n    let startCol = column - column % 3;\r\n    for (let i=0; i<3; i++){\r\n      for (let j=0; j<3; j++){\r\n         if (board[i + startRow][j + startCol] === value){\r\n           return false\r\n         }\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  solve(puzzleString) {\r\n    let board = this.transformToBoard(puzzleString);\r\n    let rows = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]; \r\n    if (this.fillInNumbers(board, 0, 0)){\r\n      return board.flat().join(\"\")\r\n    } \r\n    else{\r\n      return \"Puzzle cannot be solved\"; \r\n    }\r\n  }\r\n  isSafe(board, i, j, value){\r\n    let letterRows = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]; \r\n    let isRegionPlaceable = this.checkRegionPlacement(board, letterRows[i], j+1, value); \r\n    let isColPlacementValid = this.checkColPlacement(board, letterRows[i], j+1, value);\r\n     let isRowPlacementValid = this.checkRowPlacement(board, letterRows[i], j+1, value);  \r\n    return (isRegionPlaceable && isColPlacementValid && isRowPlacementValid); \r\n  }\r\n\r\n  fillInNumbers(board, row, column){\r\n    if (row === 8 &&  column === 9){\r\n      return true;\r\n    }\r\n    \r\n    if (column===9){\r\n      row += 1;\r\n      column = 0; \r\n    }\r\n\r\n    if (board[row][column] !==\".\"){\r\n      return this.fillInNumbers(board, row, column + 1)\r\n    }\r\n    for (let value = 1; value <=9; value++){\r\n      if (this.isSafe(board, row, column, String(value))){\r\n        board[row][column] = String(value); \r\n        if (this.fillInNumbers(board, row, column + 1)){\r\n          return true\r\n        }\r\n      }\r\n      board[row][column] = \".\"\r\n    }\r\n    return false; \r\n  }\r\n\r\n  transformToBoard(puzzleString){\r\n    let board = []; \r\n    let puzzleArr = puzzleString.split(\"\"); \r\n    for (let i=0; i<9; i++){\r\n      board.push(puzzleArr.slice(9*i, (i+1)*9))\r\n    } \r\n    return board; \r\n  }\r\n\r\n  convertLetterToRow(row){\r\n    const rowConverter = {\r\n      A:0, \r\n      B:1, \r\n      C:2, \r\n      D:3, \r\n      E:4, \r\n      F:5, \r\n      G:6, \r\n      H:7, \r\n      I:8\r\n    }\r\n    return rowConverter[row]; \r\n  }\r\n}\r\nmodule.exports = SudokuSolver;"
      ]
    },
    "sourceType": "script",
    "mtime": 1692393219149
  }
}